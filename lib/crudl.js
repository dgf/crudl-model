// Generated by CoffeeScript 1.6.3
(function() {
  var Crudl, _,
    __hasProp = {}.hasOwnProperty;

  _ = require('underscore');

  Crudl = (function() {
    var findAll, findAndExecute, rawQuery, validateAndSave;

    validateAndSave = function(instance, onSuccess, onError) {
      var errors;
      errors = instance.validate();
      if (errors) {
        return onError('validation failed', errors);
      } else {
        return instance.save().success(onSuccess).error(onError);
      }
    };

    findAndExecute = function(model, options, onError, onSuccess) {
      if (options != null) {
        return model.find(options).error(onError).success(onSuccess);
      } else {
        return onError('empty find query');
      }
    };

    findAll = function(model, options, onSuccess, onError) {
      return model.findAll(options).error(onError).success(function(instances) {
        return onSuccess(_.toArray(instances));
      });
    };

    rawQuery = function(model, query, onSuccess, onError) {
      return model.daoFactoryManager.sequelize.query(query, null, {
        raw: true
      }).success(onSuccess).error(onError);
    };

    function Crudl(model) {
      this.model = model;
      this.table = this.model.tableName;
    }

    Crudl.prototype.create = function(values, onSuccess, onError) {
      var instance;
      instance = this.model.build(values);
      return validateAndSave(instance, onSuccess, onError);
    };

    Crudl.prototype.update = function(options, values, onSuccess, onError) {
      return findAndExecute(this.model, options, onError, function(instance) {
        var prop, value;
        if (instance == null) {
          return onError('nothing found');
        } else {
          for (prop in values) {
            if (!__hasProp.call(values, prop)) continue;
            value = values[prop];
            instance[prop] = value;
          }
          return validateAndSave(instance, onSuccess, onError);
        }
      });
    };

    Crudl.prototype.destroy = function(options, onSuccess, onError) {
      return findAndExecute(this.model, options, onError, function(instance) {
        if (instance != null) {
          return instance.destroy().error(onError).success(onSuccess);
        } else {
          return onError('nothing found');
        }
      });
    };

    Crudl.prototype.find = function(options, onSuccess, onError) {
      return findAndExecute(this.model, options, onError, onSuccess);
    };

    Crudl.prototype.all = function(onSuccess, onError) {
      return findAll(this.model, {}, onSuccess, onError);
    };

    Crudl.prototype.list = function(options, onSuccess, onError) {
      return findAll(this.model, options, onSuccess, onError);
    };

    Crudl.prototype.persist = function(options, values, onSuccess, onError) {
      var _this = this;
      return findAndExecute(this.model, options, onError, function(instance) {
        var prop, value;
        if (instance != null) {
          for (prop in values) {
            if (!__hasProp.call(values, prop)) continue;
            value = values[prop];
            instance[prop] = value;
          }
        } else {
          instance = _this.model.build(values);
        }
        return validateAndSave(instance, onSuccess, onError);
      });
    };

    Crudl.prototype.count = function(onSuccess, onError) {
      return this.model.count().success(onSuccess).error(onError);
    };

    Crudl.prototype.reset = function(onSuccess, onError) {
      return this.model.sync({
        force: true
      }).success(onSuccess).error(onError);
    };

    Crudl.prototype.clear = function(onSuccess, onError) {
      return rawQuery(this.model, 'DELETE FROM ' + this.model.tableName, onSuccess, onError);
    };

    return Crudl;

  })();

  module.exports = function(model) {
    return _.extend(model.options.classMethods, new Crudl(model));
  };

}).call(this);
